version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: dracs-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-dracs_admin_pass}
      MONGO_INITDB_DATABASE: dracs
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - dracs-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/dracs --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.0-alpine
    container_name: dracs-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-dracs_redis_pass}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dracs-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MQTT Broker (Eclipse Mosquitto)
  mqtt:
    image: eclipse-mosquitto:2.0
    container_name: dracs-mqtt
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./config/password.txt:/mosquitto/config/password.txt:ro
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    networks:
      - dracs-network
    healthcheck:
      test: ["CMD-SHELL", "timeout 10s mosquitto_sub -h localhost -t 'test' -C 1 -u ${MQTT_USERNAME:-dracs} -P ${MQTT_PASSWORD:-dracs_mqtt_pass}"]
      interval: 30s
      timeout: 15s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: dracs-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGO_URI: mongodb://admin:${MONGO_ROOT_PASSWORD:-dracs_admin_pass}@mongodb:27017/dracs?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-dracs_redis_pass}@redis:6379
      MQTT_URL: mqtt://mqtt:1883
      MQTT_USERNAME: ${MQTT_USERNAME:-dracs}
      MQTT_PASSWORD: ${MQTT_PASSWORD:-dracs_mqtt_pass}
      JWT_SECRET: ${JWT_SECRET:-your-super-secure-jwt-secret}
      SESSION_SECRET: ${SESSION_SECRET:-your-super-secure-session-secret}
      GOOGLE_MAPS_KEY: ${GOOGLE_MAPS_KEY}
      AI_SERVICE_URL: ${AI_SERVICE_URL:-http://ai-service:8001}
      BATTERY_FAILSAFE: ${BATTERY_FAILSAFE:-20}
      MIN_BATTERY_ASSIGN: ${MIN_BATTERY_ASSIGN:-35}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      SENTRY_DSN: ${SENTRY_DSN}
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - dracs-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      mqtt:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Frontend Application (Nginx + React Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        VITE_WS_URL: ${VITE_WS_URL:-http://localhost:5000}
        VITE_GOOGLE_MAPS_KEY: ${GOOGLE_MAPS_KEY}
    container_name: dracs-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - dracs-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI/ML Service (Optional)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: dracs-ai-service
    restart: unless-stopped
    environment:
      MODEL_PATH: /app/models
      DEVICE: ${AI_DEVICE:-cpu}
      BATCH_SIZE: ${AI_BATCH_SIZE:-1}
      MAX_WORKERS: ${AI_MAX_WORKERS:-2}
    ports:
      - "8001:8001"
    volumes:
      - ./ai-service/models:/app/models
      - ./ai-service/data:/app/data
    networks:
      - dracs-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    # comment if are not using GPU
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: dracs-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - dracs-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: dracs-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - dracs-network
    depends_on:
      - prometheus

  # Log Management - ELK Stack (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: dracs-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - dracs-network

  # Reverse Proxy & Load Balancer
  nginx-proxy:
    image: nginx:alpine
    container_name: dracs-proxy
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - dracs-network
    depends_on:
      - frontend
      - backend

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  dracs-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
